plugins {
    id 'java'
    id 'application'
    id 'idea'

    // Creates fat JAR
    id 'com.github.johnrengelman.shadow' version '5.2.0'

    // Downloads binary dependencies
    id 'de.undercouch.download' version '4.0.2'

    // Adds dependencyUpdates task
    id 'com.github.ben-manes.versions' version '0.27.0'
}

def gradleDependencyVersion = '6.0.1'

wrapper {
    gradleVersion = gradleDependencyVersion
}

// Avoids duplicate class errors - from :https://stackoverflow.com/questions/55855714/duplicate-generated-class-gradle-output-build-vs-intellij-output-out
ext {
    // path to Gradle generated main sources directory
    gradleGeneratedMainSourcesDir = "$buildDir/generated/sources/annotationProcessor/java/main/"
    // path to Gradle generated test sources directory
    gradleGeneratedTestSourcesDir = "$buildDir/generated/sources/annotationProcessor/java/test/"
    // path to IDEA generated sources directory
    ideaGeneratedSourcesDir = "$projectDir/out/production/classes/generated"
}

// Avoids duplicate class errors - from :https://stackoverflow.com/questions/55855714/duplicate-generated-class-gradle-output-build-vs-intellij-output-out
idea {
    module {
        // exclude main & test sources generated by Gradle from project source directories
        excludeDirs += file(gradleGeneratedMainSourcesDir)
        excludeDirs += file(gradleGeneratedTestSourcesDir)

        // include generated sources directory managed by IDEA
        sourceDirs += file(ideaGeneratedSourcesDir)
        generatedSourceDirs += file(ideaGeneratedSourcesDir)
    }
}

// Use the GGProvisioner main class when the JAR is invoked directly
mainClassName = 'com.awslabs.aws.greengrass.provisioner.AwsGreengrassProvisioner'

distZip.enabled = shadowDistZip.enabled = false
distTar.enabled = shadowDistTar.enabled = false

// Specify all of our dependency versions
def guiceVersion = '4.2.2'
def configVersion = '1.4.0'
def ztZipVersion = '1.13'
def jcommanderVersion = '1.78'
def slf4jVersion = '1.7.29'
def jcabiVersion = '0.18.1'
def jtarVersion = '2.3'
def gsonVersion = '2.8.6'
def dockerClientVersion = '8.16.0'
def awsSdk2Version = '2.10.35'
def mavenInvokerVersion = '3.0.1'
def commonsTextVersion = '1.8'
def commonsLangVersion = '3.9'
def junitVersion = '4.12'
def systemRulesVersion = '1.19.0'
def mockitoVersion = '3.2.0'
def vavrVersion = '0.10.2'
def httpClientVersion = '4.5.10'
def jodahFailsafeVersion = '2.3.1'
def testContainersVersion = '1.12.4'
def hamcrestVersion = '2.2'
def awsIotCoreWebsocketsVersion = '0.6.3'
def awaitilityVersion = '4.0.1'
def immutablesValueVersion = '2.8.2'
def awsLambdaJavaCoreVersion = '1.2.0'

def buildDirDist = "$buildDir/dist"
def buildDirTemp = "$buildDir/temp"
def buildDirFoundation = "$buildDir/foundation"

task downloadGreengrassBinaries(type: Download) {
    // Download the Greengrass binaries into the dist directory so they can be packaged into the JAR
    src(
            ['https://d1onfpft10uf5o.cloudfront.net/greengrass-core/downloads/1.10.0/greengrass-linux-aarch64-1.10.0.tar.gz',
             'https://d1onfpft10uf5o.cloudfront.net/greengrass-core/downloads/1.10.0/greengrass-openwrt-aarch64-1.10.0.tar.gz',
             'https://d1onfpft10uf5o.cloudfront.net/greengrass-core/downloads/1.10.0/greengrass-linux-armv7l-1.10.0.tar.gz',
             'https://d1onfpft10uf5o.cloudfront.net/greengrass-core/downloads/1.10.0/greengrass-openwrt-armv7l-1.10.0.tar.gz',
             'https://d1onfpft10uf5o.cloudfront.net/greengrass-core/downloads/1.10.0/greengrass-linux-armv6l-1.10.0.tar.gz',
             'https://d1onfpft10uf5o.cloudfront.net/greengrass-core/downloads/1.10.0/greengrass-linux-x86-64-1.10.0.tar.gz']
    )
    dest "$buildDirDist"
    overwrite false
}

def nodeSdkTarGz = 'aws-greengrass-core-sdk-js-1.4.0.tar.gz'
def nodeSdkZip = 'aws-greengrass-core-sdk-js.zip'

task fetchGreengrassNodeSdk(type: Download) {
    src "https://d1onfpft10uf5o.cloudfront.net/greengrass-sdk/downloads/nodejs/8.10/$nodeSdkTarGz"
    dest new File(buildDir, nodeSdkTarGz)
    overwrite false
}

task extractNodeSdk(type: Copy, dependsOn: fetchGreengrassNodeSdk) {
    from tarTree(fetchGreengrassNodeSdk.dest)
    into buildDirTemp
}

task downloadNodeSdk(type: Copy, dependsOn: extractNodeSdk) {
    from "$buildDirTemp/aws-greengrass-core-sdk-js-1.4.0/sdk/$nodeSdkZip"
    into "$buildDirFoundation"
}

task downloadAll {
    dependsOn downloadGreengrassBinaries
    dependsOn downloadNodeSdk
}

// This task will be enabled when Greengrass Core and the SDKs are available directly via S3
assemble.dependsOn downloadAll

group = 'com.awslabs.aws.greengrass.provisioner.AwsGreengrassProvisioner'
version = '1.0-SNAPSHOT'

description = """"""

shadowJar {
    // Create a shadow JAR with all of the necessary dependencies
    archiveFileName = 'AwsGreengrassProvisioner.jar'

    // Include the "dist" files which are the SDKs and Greengrass binaries
    into('/dist') {
        from fileTree("$buildDirDist")
    }

    // Include the foundation for the Java functions
    into('/foundation') {
        from fileTree("$buildDirFoundation")
    }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenCentral()

    maven { url "https://repo.gradle.org/gradle/libs-releases-local/" }

    // Jitpack for MQTT over WebSockets support
    maven { url 'https://jitpack.io' }
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += sourceSets.main.output + configurations.testCompile
            runtimeClasspath += output + compileClasspath + configurations.testRuntime

            srcDir file('src/integration-test/java')
        }
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    mustRunAfter test
}

dependencies {
    annotationProcessor "org.immutables:value:$immutablesValueVersion"
    annotationProcessor "org.immutables:gson:$immutablesValueVersion"
    compile "org.immutables:value:$immutablesValueVersion"
    compile "org.immutables:gson:$immutablesValueVersion"

    compile "com.google.inject:guice:$guiceVersion"

    compile "com.typesafe:config:$configVersion"
    compile "org.zeroturnaround:zt-zip:$ztZipVersion"
    compile "com.beust:jcommander:$jcommanderVersion"
    compile "org.slf4j:slf4j-log4j12:$slf4jVersion"
    compile "com.jcabi:jcabi-log:$jcabiVersion"
    compile "org.kamranzafar:jtar:$jtarVersion"
    compile "com.google.code.gson:gson:$gsonVersion"
    compile "com.spotify:docker-client:$dockerClientVersion"

    // For Docker-style names
    compile 'com.oblac:nomen-est-omen:2.0.0'

    // For scp/ssh support
    compile 'com.jcraft:jsch:0.1.55'

    compile "software.amazon.awssdk:greengrass:$awsSdk2Version"
    compile "software.amazon.awssdk:iam:$awsSdk2Version"
    compile "software.amazon.awssdk:iot:$awsSdk2Version"
    compile "software.amazon.awssdk:lambda:$awsSdk2Version"
    compile "software.amazon.awssdk:cloudformation:$awsSdk2Version"
    compile "software.amazon.awssdk:sts:$awsSdk2Version"
    compile "software.amazon.awssdk:ecr:$awsSdk2Version"
    compile "software.amazon.awssdk:ec2:$awsSdk2Version"
    compile "software.amazon.awssdk:s3:$awsSdk2Version"
    compile "software.amazon.awssdk:cloudwatchlogs:$awsSdk2Version"
    compile "software.amazon.awssdk:secretsmanager:$awsSdk2Version"
    compile "org.apache.maven.shared:maven-invoker:$mavenInvokerVersion"
    compile "org.apache.commons:commons-text:$commonsTextVersion"
    compile "org.apache.commons:commons-lang3:$commonsLangVersion"
    compile "org.gradle:gradle-tooling-api:$gradleDependencyVersion"
    compile "io.vavr:vavr:$vavrVersion"
    // Dependency added to fix - https://github.com/aws/aws-sdk-java-v2/issues/652
    compile "org.apache.httpcomponents:httpclient:$httpClientVersion"

    // https://mvnrepository.com/artifact/net.jodah/failsafe
    compile "net.jodah:failsafe:$jodahFailsafeVersion"

    compile "org.testcontainers:testcontainers:$testContainersVersion"

    compile "org.awaitility:awaitility:$awaitilityVersion"

    // To support AWS Lambda invocations
    compile "com.amazonaws:aws-lambda-java-core:$awsLambdaJavaCoreVersion"

    testCompile "junit:junit:$junitVersion"
    testCompile "com.github.stefanbirkner:system-rules:$systemRulesVersion"
    testCompile "org.hamcrest:hamcrest-core:$hamcrestVersion"
    testCompile "org.mockito:mockito-core:$mockitoVersion"
    testCompile "com.github.awslabs:aws-iot-core-websockets:$awsIotCoreWebsocketsVersion"
}

// From: https://gist.github.com/matthiasbalke/3c9ecccbea1d460ee4c3fbc5843ede4a
task resolveDependencies {
    doLast {
        project.rootProject.allprojects.each { subProject ->
            subProject.buildscript.configurations.each { configuration ->
                // Check to prevent "Resolving configuration 'integrationTestImplementation' directly is not allowed" error
                if (!configuration.getName().contains("integrationTest")) {
                    resolveConfiguration(configuration)
                }
            }
            subProject.configurations.each { configuration ->
                // Check to prevent "Resolving configuration 'integrationTestImplementation' directly is not allowed" error
                if (!configuration.getName().contains("integrationTest")) {
                    resolveConfiguration(configuration)
                }
            }
        }
    }
}

void resolveConfiguration(configuration) {
    if (isResolveableConfiguration(configuration)) {
        configuration.resolve()
    }
}

boolean isResolveableConfiguration(configuration) {
    def nonResolveableConfigurations = ['apiElements', 'implementation',
                                        'runtimeElements', 'runtimeOnly',
                                        'testImplementation', 'testRuntimeOnly',
                                        'generatedImplementation', 'generatedRuntimeOnly']

    if (nonResolveableConfigurations.contains(configuration.getName())) {
        return false
    }
    return true
}

AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Lambda stack for GGP

Resources:
  GreengrassServiceRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGreengrassResourceAccessRolePolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: greengrass.amazonaws.com
  GreengrassCoreRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
        - arn:aws:iam::aws:policy/AWSGreengrassFullAccess
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: greengrass.amazonaws.com
  MinimalGreengrassCoreIoTPolicy:
    Type: AWS::IoT::Policy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: iot:Connect
            Resource: "*"
          - Effect: Allow
            Action:
              - iot:Publish
              - iot:Subscribe
              - iot:Receive
            Resource:
              - !Join [ "", [ "arn:aws:iot:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":topicfilter/$aws/things/*" ] ]
              - !Join [ "", [ "arn:aws:iot:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":topic/$aws/things/*" ] ]
          - Effect: Allow
            Action:
              - iot:GetThingShadow
              - iot:UpdateThingShadow
              - iot:DeleteThingShadow
            # Possibly limit to a core name prefix
            Resource: !Join [ "", [ "arn:aws:iot:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":thing/*" ] ]
          - Effect: Allow
            Action:
              - greengrass:AssumeRoleForGroup
              - greengrass:CreateCertificate
            Resource: "*"
          - Effect: Allow
            Action: greengrass:GetDeployment
            # Possibly limit to a core name prefix
            Resource: !Join [ "", [ "arn:aws:greengrass:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":/greengrass/groups/*/deployments/*" ] ]
          - Effect: Allow
            Action: greengrass:GetDeploymentArtifacts
            # Possibly limit to a core name prefix
            Resource: !Join [ "", [ "arn:aws:greengrass:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":/greengrass/groups/*/deployments/*" ] ]
          - Effect: Allow
            Action: greengrass:UpdateCoreDeploymentStatus
            # Possibly limit to a core name prefix
            Resource: !Join [ "", [ "arn:aws:greengrass:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":/greengrass/groups/*/deployments/*" ] ]
          - Effect: Allow
            Action:
              - greengrass:GetConnectivityInfo
              - greengrass:UpdateConnectivityInfo
            # Possibly limit to a core name prefix
            Resource: !Join [ "", [ "arn:aws:iot:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":thing/*" ] ]
  ServiceRoleDetectionAndAssociationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - greengrass:GetServiceRoleForAccount
                Resource: "*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !GetAtt GreengrassServiceRole.Arn
              - Effect: Allow
                Action:
                  - greengrass:AssociateServiceRoleToAccount
                  - greengrass:DisassociateServiceRoleFromAccount
                Resource: !Join ["", [ "arn:aws:greengrass:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":/greengrass/servicerole" ] ]
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: arn:aws:logs:*:*:*
  ProvisionerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - iot:*
                  - greengrass:*
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action: iam:GetRole
                Resource: !GetAtt GreengrassServiceRole.Arn
  NpmLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: npm
      Description: "nodejs/npm layer for ggp lambda"
      ContentUri: ./layers/npm-layer.zip
      CompatibleRuntimes:
        - java8
      RetentionPolicy: Delete
  AwsSdkLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: aws-sdk
      Description: "AWS SDK for java V2"
      ContentUri: ./layers/aws-sdk-layer/
      CompatibleRuntimes:
        - java8
      RetentionPolicy: Delete
  GgpConfigLambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: ggp-config
      Description: "AwsGreengrassProvisioner Config"
      ContentUri: ./layers/ggp-config-layer/
      CompatibleRuntimes:
        - java8
      RetentionPolicy: Delete
  ProvisionerPolymorphLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      # FunctionName: !Sub 'ProvisionerPolymorphLambdaFunction'
      CodeUri: ../build/libs/AwsGreengrassProvisioner.jar
      Handler: com.awslabs.aws.greengrass.provisioner.lambda.polymorphic.AwsGreengrassProvisionerPolymorphLambda::handleRequest
      Layers:
        - !Ref GgpConfigLambdaLayer
        - !Ref AwsSdkLambdaLayer
        - !Ref NpmLambdaLayer
      MemorySize: 3008
      Role: !GetAtt ProvisionerLambdaRole.Arn
      Runtime: java8
      Timeout: 900
      Environment:
        Variables:
          ServiceRoleName: !Ref ServiceRoleAssociation
  ServiceRoleDetection:
    Type: Custom::ServiceRoleDetectionLambda
    Properties:
      ServiceToken: !GetAtt ServiceRoleDetectionLambda.Arn
      RoleArn: !GetAtt GreengrassServiceRole.Arn
  ServiceRoleDetectionLambda:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt ServiceRoleDetectionAndAssociationLambdaRole.Arn
      Code:
        ZipFile: |
          import boto3
          import botocore
          import sys
          import logging
          import cfnresponse

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
            role_arn = event['ResourceProperties'].get('RoleArn')

            response_data = {}
            response_data['role_arn'] = role_arn

            try:
              greengrass_client = boto3.client('greengrass')
              service_role_response = greengrass_client.get_service_role_for_account()
              role_arn = service_role_response['RoleArn']
              response_data['role_arn'] = role_arn
              logger.info('Service role already associated with account [{}]'.format(role_arn))
            except botocore.exceptions.ClientError as e:
              if e.response['Error']['Code'] == '404':
                logger.info('Service role not associated with account, will associate a role later')
              else:
                raise

            cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, role_arn)
      Handler: index.lambda_handler
      Timeout: 30
      Runtime: python3.6
  ServiceRoleAssociation:
    Type: Custom::ServiceRoleAssociationLambda
    Properties:
      ServiceToken: !GetAtt ServiceRoleAssociationLambda.Arn
      NewRoleArn: !GetAtt GreengrassServiceRole.Arn
      RoleArn: !Ref ServiceRoleDetection
  ServiceRoleAssociationLambda:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt ServiceRoleDetectionAndAssociationLambdaRole.Arn
      Code:
        ZipFile: |
          import boto3
          import botocore
          import sys
          import logging
          import cfnresponse

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
            request_type = event['RequestType']

            account_id = event['ResourceProperties'].get('AccountId')
            role_arn = event['ResourceProperties'].get('RoleArn')
            new_role_arn = event['ResourceProperties'].get('NewRoleArn')

            response_data = {}
            response_data['role_arn'] = role_arn

            greengrass_client = boto3.client('greengrass')

            if request_type == 'Create':
              if role_arn == new_role_arn:
                # The new role is the one to use, associate it
                logger.info("Calling greengrass:associate_service_role_to_account [{}]".format(role_arn))
                greengrass_client.associate_service_role_to_account(RoleArn=role_arn)
              else:
                logger.info("Not calling greengrass:associate_service_role_to_account, role already associated [{}]".format(role_arn))
            elif request_type == 'Delete':
              service_role_response = greengrass_client.get_service_role_for_account()
              role_arn = service_role_response['RoleArn']

              if role_arn == new_role_arn:
                # We created the role, disassociate it
                logger.info("Calling greengrass:disassociate_service_role_from_account [{}]".format(role_arn))
                greengrass_client.disassociate_service_role_from_account()
              else:
                logger.info("Service role is not from this stack, not disassociating service role [{}]".format(role_arn))

            cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, role_arn)
      Handler: index.lambda_handler
      Timeout: 30
      Runtime: python3.6

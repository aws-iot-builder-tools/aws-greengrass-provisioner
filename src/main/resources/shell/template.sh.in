#!/usr/bin/env bash

# Check if we're root and re-execute if we're not.
rootcheck() {
  if [ $(id -u) != "0" ]; then
    sudo "$0" "$@"
    exit $?
  fi
}

rootcheck "${@}"

ETC_ISSUE=$(cat /etc/issue)

if [[ "$ETC_ISSUE" =~ "Ubuntu 16.04" ]]; then
  echo "Ubuntu 16.04 is no longer supported by this installer because too many dependencies are missing from the repos."
  exit 1
fi

if ls /var/lib/cloud/instances/*/* 1>/dev/null 2>&1; then
  echo "Looks like we are running on EC2, waiting for cloud-init to finish"

  while [ ! -f /var/lib/cloud/instances/*/boot-finished ]; do
    echo "Waiting for boot-finished file to appear..."
    sleep 2
  done
else
  echo "Looks like we are not running on EC2, bootstrapping immediately"
fi

function untar_payload() {
  match=$(grep --text --line-number '^PAYLOAD:$' $0 | cut -d ':' -f 1)
  payload_start=$((match + 1))
  tail -n +$payload_start $0 | tar xvf -
}

install_aws_credential_process() {
  GREENGRASS_REGION_FILE="/greengrass/config/region.txt"
  CREDENTIALS_SCRIPT="/greengrass/config/credentials.sh"

  # Get the user from the first parameter
  INPUT_USER=$1

  AWS_CLI=$(which aws)
  AWS_CLI_MISSING=$?

  if [ $AWS_CLI_MISSING -eq 1 ]; then
    echo "Not configuring credential provider for [$INPUT_USER] since the AWS CLI is not installed"
    return
  fi

  # Make sure the .aws directory and config file exist and are owned by the current user
  DIR=$(eval echo "~$INPUT_USER")
  mkdir -p $DIR/.aws
  touch $DIR/.aws/config
  chown -R $1:$1 $DIR/.aws

  # Always use the greengrass profile
  PROFILE="--profile greengrass"

  if [ $INPUT_USER != "root" ]; then
    RUN_USER_PREFIX="runuser -l ${SUDO_USER} -c \""
    RUN_USER_SUFFIX="\""
  else
    RUN_USER_PREFIX=""
    RUN_USER_SUFFIX=""
  fi

  REGION=$(cat $GREENGRASS_REGION_FILE)

  CMD="$RUN_USER_PREFIX aws configure set $PROFILE region $REGION $RUN_USER_SUFFIX"
  eval $CMD
  CMD="$RUN_USER_PREFIX aws configure set $PROFILE output json $RUN_USER_SUFFIX"
  eval $CMD
  CMD="$RUN_USER_PREFIX aws configure set $PROFILE credential_process $CREDENTIALS_SCRIPT $RUN_USER_SUFFIX"
  eval $CMD
  CMD="$RUN_USER_PREFIX aws configure set $PROFILE configured_by_ggp true $RUN_USER_SUFFIX"
  eval $CMD
}

rootcheck "${@}"

SCRIPT_NAME=$(basename "$0")

if [[ $SCRIPT_NAME =~ DEPLOYED ]]; then
  echo "This script has already been used to deploy your core.  Start the core with the start.sh script instead of running the deployer again."
  echo "   "
  echo "If you re-run this script you will need to do a new deployment on your group from the AWS Greengrass console or your functions will not be downloaded automatically."
  echo "   "
  echo "To re-run this script rename it and remove the .DEPLOYED suffix"
  exit 1
fi

GETOPT=$(which getopt)
GETOPT_MISSING=$?

if [ $GETOPT_MISSING -eq 1 ]; then
  echo "getopt is missing, cannot process advanced command-line arguments"

  if [ "$1" == "--now" ]; then
    START=true
    UPDATE_DEPENDENCIES=true
  fi
else
  TEMP=$(getopt --options isun --longoptions install,start,update,now -- "$@")

  if [ $? != 0 ]; then
    echo "Terminating..." >&2
    exit 1
  fi

  # Note the quotes around `$TEMP': they are essential!
  eval set -- "$TEMP"

  INSTALL=false
  START=false
  UPDATE_DEPENDENCIES=false
  OPTION_SPECIFIED=false
  while true; do
    case "$1" in
    -i | --install)
      OPTION_SPECIFIED=true
      INSTALL=true
      shift
      ;;
    -s | --start)
      OPTION_SPECIFIED=true
      START=true
      shift
      ;;
    -u | --update)
      OPTION_SPECIFIED=true
      UPDATE_DEPENDENCIES=true
      shift
      ;;
    -n | --now)
      OPTION_SPECIFIED=true
      UPDATE_DEPENDENCIES=true
      INSTALL=true
      START=true
      shift
      ;;
    *) break ;;
    esac
  done

  if $INSTALL; then
    echo "[Options] Installing Greengrass"
  fi

  if $START; then
    echo "[Options] Starting Greengrass"
  fi

  if $UPDATE_DEPENDENCIES; then
    echo "[Options] Updating dependencies"
  fi
fi

if [ "$OPTION_SPECIFIED" == false ]; then
  echo "No options specified, will prompt user"
  unset INSTALL
  unset START
  unset UPDATE_DEPENDENCIES
fi

if [ -z "$INSTALL" ]; then
  read -p "Install Greengrass? " -n 1 -r
  echo

  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "Not installing Greengrass"
    exit 1
  fi
fi

if [ -z "$START" ]; then
  read -p "Start Greengrass? " -n 1 -r
  echo

  START=true

  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    START=false
  fi
fi

if [ -z "$UPDATE_DEPENDENCIES" ]; then
  read -p "Update dependencies? " -n 1 -r
  echo

  UPDATE_DEPENDENCIES=true

  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    UPDATE_DEPENDENCIES=false
  fi
fi

if [ -e "stop.sh" ]; then
  echo "Attempting to stop Greengrass, if necessary"
  ./${STOP_SCRIPT}
fi

ADD_USER=$(which adduser)
ADD_USER_MISSING=$?

if [ $ADD_USER_MISSING -eq 1 ]; then
  echo "adduser is missing, cannot continue"
  exit 1
fi

ADD_GROUP=$(which groupadd)
ADD_GROUP_MISSING=$?

if [ $ADD_GROUP_MISSING -eq 1 ]; then
  ADD_GROUP=$(which addgroup)
  ADD_GROUP_MISSING=$?

  if [ $ADD_GROUP_MISSING -eq 1 ]; then
    echo "addgroup is missing, cannot continue"
    exit 1
  fi
fi

# Dependencies script is in the payload, untar it
untar_payload

set -e
set -x

# Remove any old Greengrass installation
rm -rf /greengrass

# Put the Greengrass bits in place
mkdir -p /greengrass && sudo tar -zxf ${GG_BITS} -C /

# Copy the configuration information into the Greengrass directory
cp certs/* /greengrass/certs/
cp config/* /greengrass/config/
cp credentials.sh /greengrass/config/

set +e
set +x

# Must add the ggc_user and ggc_group before updating dependencies
$ADD_USER --system ggc_user
$ADD_GROUP --system ggc_group

if [ "$UPDATE_DEPENDENCIES" == true ]; then
  set -e
  ./${UPDATE_DEPENDENCIES_SCRIPT}
  set +e
fi

# After the dependencies are set up try to install the AWS credential process
install_aws_credential_process "root"
install_aws_credential_process "${SUDO_USER}"

EXPECTED_JAVA_LOCATION="/usr/local/bin/java8"
JAVA_8=$(which java8)
JAVA_8_MISSING=$?

if [ $JAVA_8_MISSING -eq 1 ]; then
  JAVA=$(which java)
  JAVA_MISSING=$?

  if [ $JAVA_MISSING -eq 1 ]; then
    # Can't set up the symlink
    echo "[WARN] Java is not present, not setting up the symlink for it"
  else
    ln -s $JAVA $EXPECTED_JAVA_LOCATION
  fi
fi

if [ -d "${SYSTEMD_DESTINATION_PATH}" ]; then
  echo "systemd detected"

  if [ ! -f "${SYSTEMD_DESTINATION_PATH}/${SYSTEMD_SCRIPT}" ]; then
    echo "Creating Greengrass systemd service"
    cp ${SYSTEMD_SCRIPT} ${SYSTEMD_DESTINATION_PATH}/${SYSTEMD_SCRIPT}
    systemctl daemon-reload
    systemctl enable greengrass
  else
    echo "Greengrass service already exists, skipping installation of systemd file"
  fi
fi

# At this point everything has been deployed, mark the script as deployed
mv $SCRIPT_NAME $SCRIPT_NAME.DEPLOYED

if [ "$START" == true ]; then
  ./${START_SCRIPT}
fi

exit 0
